import logging
import hashlib
import sqlite3
from datetime import datetime
import requests
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
CHECK_INTERVAL = 15  # –º–∏–Ω—É—Ç

# API endpoints
NEWS_API_URL = "https://newsapi.org/v2/everything"
TRANSLATE_API_URL = "https://api.mymemory.translated.net/get"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('news.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS news
             (id TEXT PRIMARY KEY, 
              title TEXT, 
              title_ru TEXT,
              url TEXT, 
              source TEXT,
              published_at TIMESTAMP)''')
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def translate_text(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ MyMemory Translation API"""
    if not text.strip():
        return text

    try:
        params = {
            'q': text,
            'langpair': 'en|ru',
            'de': 'example@example.com'
        }

        response = requests.get(
            TRANSLATE_API_URL,
            params=params,
            timeout=10
        )
        response.raise_for_status()
        result = response.json()
        
        if result['responseStatus'] == 200:
            return result['responseData']['translatedText']
        return text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        return text

def generate_news_id(title: str, url: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    return hashlib.md5(f"{title}{url}".encode()).hexdigest()

def fetch_bitcoin_news() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ Bitcoin"""
    params = {
        "q": "Bitcoin OR BTC",
        "sortBy": "publishedAt",
        "apiKey": NEWS_API_KEY,
        "language": "en",
        "pageSize": 20
    }
    
    try:
        response = requests.get(NEWS_API_URL, params=params, timeout=10)
        response.raise_for_status()
        return response.json().get('articles', [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ News API: {e}")
        return []

async def check_and_send_news(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        articles = fetch_bitcoin_news()
        if not articles:
            logger.info("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        new_articles = []
        for article in articles:
            try:
                title = article['title']
                url = article['url']
                source = article['source']['name']
                published_at = datetime.strptime(
                    article['publishedAt'], 
                    '%Y-%m-%dT%H:%M:%SZ'
                )
                
                news_id = generate_news_id(title, url)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ
                c.execute('SELECT id FROM news WHERE id=?', (news_id,))
                if not c.fetchone():
                    new_articles.append({
                        'id': news_id,
                        'title': title,
                        'url': url,
                        'source': source,
                        'published_at': published_at
                    })

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
        for article in new_articles:
            translated_title = translate_text(article['title'])
            
            message = (
                f"üì∞ *{translated_title}*\n"
                f"üîó _–ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}_\n"
                f"üìÜ _–î–∞—Ç–∞: {article['published_at'].strftime('%d.%m.%Y %H:%M')}_\n"
                f"[–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª]({article['url']})"
            )
            
            await context.bot.send_message(
                chat_id=context.job.chat_id,
                text=message,
                parse_mode="Markdown"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            c.execute('''
                INSERT INTO news 
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (article['id'], article['title'], translated_title, 
                  article['url'], article['source'], article['published_at']))
            conn.commit()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    context.job_queue.run_repeating(
        check_and_send_news,
        interval=CHECK_INTERVAL * 60,
        first=10,
        chat_id=chat_id
    )
    await update.message.reply_text(
        f"üîî –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /latest –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."
    )

async def latest_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest"""
    try:
        articles = fetch_bitcoin_news()[:5]
        if not articles:
            await update.message.reply_text("üòî –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        sent_articles = []
        for article in articles:
            title = article['title']
            url = article['url']
            news_id = generate_news_id(title, url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ
            c.execute('SELECT id FROM news WHERE id=?', (news_id,))
            if not c.fetchone():
                translated_title = translate_text(title)
                message = (
                    f"üì∞ *{translated_title}*\n"
                    f"[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({url})"
                )
                await update.message.reply_text(message, parse_mode="Markdown")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                c.execute('''
                    INSERT INTO news 
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (news_id, title, translated_title, 
                      url, article['source']['name'], 
                      datetime.strptime(article['publishedAt'], '%Y-%m-%dT%H:%M:%SZ')))
                sent_articles.append(news_id)
        
        if not sent_articles:
            await update.message.reply_text("üîÑ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç")

        conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /latest: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ["TELEGRAM_TOKEN", "NEWS_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        exit(1)

    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("latest", latest_news))
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run_polling()
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")